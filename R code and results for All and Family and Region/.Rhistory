mean(c(-0.71915363,
-0.781641553,
-0.766090857,
-0.870978969,
-0.638498136,
-0.846848514,
-0.591919197,
-0.976396983
))
sd(c(-0.71915363,
-0.781641553,
-0.766090857,
-0.870978969,
-0.638498136,
-0.846848514,
-0.591919197,
-0.976396983
))
mean(c(-0.843436714,
-0.830761974,
-0.641715224,
-0.946074432,
-0.674816506,
-0.391181439,
-0.753629286,
-0.637283332,
-1.796488082
))
sd(c(-0.843436714,
-0.830761974,
-0.641715224,
-0.946074432,
-0.674816506,
-0.391181439,
-0.753629286,
-0.637283332,
-1.796488082
))
setwd("C:/GongTao/Academic Activities/Publications/Linguistics/Journals/English/Frontiers in Psychology-SCI/VowelEvo/SupportInfo_git/R code and results for All and Family and Region")
require(stats)
require(lme4)
require(lmerTest)
require(EMAtools)
require(party)
require(lattice)
require(MuMIn)
require(boot)
require(ggplot2)
require(plotrix)
# for drawing figures
geom.text.size = 5; theme.size = 3*geom.text.size
sizex <- 10; sizey <- 8; hjust <- 0.5; angle <- 45
# number of digits
nsmall <- 4
savefig <- function(fileName, dpi, width, height, units, type){
#' Function to save figures
#' @param fileName file name of the figure
#' @param dpi resolution, e.g., 300
#' @param width figure width in inches (units)
#' @param height figure height in inches (units)
#' @param units unit name for width and height, e.g., 'in'
#' @param type figure type: 'png', png figure; 'pdf', pdf figure; 'both', both png and pdf figures
if(type=="png"){ file <- paste(fileName, ".png", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units) }
if(type=="pdf"){ file <- paste(fileName, ".pdf", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units) }
if(type=="both"){
file <- paste(fileName, ".png", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units)
file <- paste(fileName, ".pdf", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units)
}
}
direct <- '.'
# read in data in csv
df <- read.csv(file.path(direct, 'Supplementary Dataset S1_532 language samples.csv'))
#############################
# global level lme and figure
#############################
resdir <- file.path(direct, 'All'); dir.create(resdir, showWarnings = FALSE)
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
# global level lm
lm_all <- lm(log10(Focalization) ~ log10(Effective_DE), data = df)
summary(lm_all)
# calculate r square
r.squaredGLMM(lm_all)
# global level lme
lme_all <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|Geographic_Region/ISO693_Code) + (1|Family), data = df, control=lmerControl(optCtrl=list(maxfun=20000)))
summary(lme_all)
# calculate r square
r.squaredGLMM(lme_all)
# fitting curve
# raw power law
x <- df$Effective_DE; y <- df$Focalization
z <- nls(y ~ a*x^(-b) + c, start = list(a=1, b=1, c=1))
summary(z)
a <- coef(summary(z))[, 'Estimate'][1]; b <- coef(summary(z))[, 'Estimate'][2]; c <- coef(summary(z))[, 'Estimate'][3]
pwr <- function(x){ a*x^(-b) + c }
lab <- paste("Power-law formula:",
"\nFE = ",  format(round(a, nsmall), nsmall), "*", "(Effective DE)^(-", format(round(b, nsmall), nsmall), ")", format(round(c, nsmall), nsmall),
"\nAdj. R^2 = ", format(round(r.squaredGLMM(lm_all)[,'R2c'], nsmall), nsmall), sep="")
ggplot(df, aes(x=Effective_DE, y=Focalization)) +
geom_point(aes(color = Geographic_Region), size=2) +
geom_line(aes(x=Effective_DE, y=pwr(x)), size = 1) +
geom_text(aes(x=0.5, y=1, label=lab), hjust=0, size=geom.text.size) +
xlab('Effective DE') + ylab('FE') +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, 'lme_all_raw')
savefig(fileName, 300, 10, 4, "in", "both")
# log ~ log linear
fit_intercept <- coef(summary(lme_all))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_all))[,'Estimate'][2]
lab <- paste("Slope K = ", format(round(fit_slope, nsmall), nsmall),
"\nIntercept = ", format(round(fit_intercept, nsmall), nsmall),
"\np-value = ", round(coef(summary(lme_all))['log10(Effective_DE)','Pr(>|t|)'], abs(floor(log10(coef(summary(lme_all))['log10(Effective_DE)','Pr(>|t|)'])-nsmall))),
"\nAdj. R^2 = ", format(round(r.squaredGLMM(lme_all)[,'R2c'], nsmall), nsmall), sep="")
lab
ggplot(df, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(aes(color=Geographic_Region), size=2) +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
geom_text(aes(x=-0.4, y=-0.3, label=lab), hjust=0, size=geom.text.size) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, 'lme_all_loglog')
savefig(fileName, 300, 10, 4, "in", "both")
##############################
# average level lm and figure
##############################
resdir <- file.path(direct, 'Average'); dir.create(resdir, showWarnings = FALSE)
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
# create summary data
# by family
df_avg <- data.frame(matrix(ncol = 17, nrow = 0))
colnames(df_avg) <- c('Family', 'NoSample',
'Vowel_Number_mean', 'Vowel_Number_median', 'Vowel_Number_se',
'Dispersion_mean', 'Dispersion_median', 'Dispersion_se',
'Focalization_log_mean', 'Focalization_log_median', 'Focalization_log_se',
'Articulatory_Space_mean', 'Articulatory_Space_median', 'Articulatory_Space_se',
'Effective_DE_log_mean', 'Effective_DE_log_median', 'Effective_DE_log_se')
for(family in unique(df$Family)){
subdf <- df[df$Family==family, ]
df_avg <- rbind(df_avg, data.frame(Family = family,
NoSample = nrow(subdf),
Vowel_Number_mean = mean(subdf$Vowel_Number, na.rm=TRUE), Vowel_Number_median = median(subdf$Vowel_Number, na.rm=TRUE), Vowel_Number_se = std.error(subdf$Vowel_Number, na.rm=TRUE),
Dispersion_mean = mean(subdf$Dispersion, na.rm=TRUE), Dispersion_median = median(subdf$Dispersion, na.rm=TRUE), Dispersion_se = std.error(subdf$Dispersion, na.rm=TRUE),
Focalization_log_mean = mean(log10(subdf$Focalization), na.rm=TRUE), Focalization_log_median = median(log10(subdf$Focalization), na.rm=TRUE), Focalization_log_se = std.error(log10(subdf$Focalization), na.rm=TRUE),
Articulatory_Space_mean = mean(subdf$Articulatory_Space, na.rm=TRUE), Articulatory_Space_median = median(subdf$Articulatory_Space, na.rm=TRUE), Articulatory_Space_se = std.error(subdf$Articulatory_Space, na.rm=TRUE),
Effective_DE_log_mean = mean(log10(subdf$Effective_DE), na.rm=TRUE), Effective_DE_log_median = median(log10(subdf$Effective_DE), na.rm=TRUE), Effective_DE_log_se = std.error(log10(subdf$Effective_DE), na.rm=TRUE)))
}
# sort by NoSample
df_avg <- df_avg[order(-df_avg$NoSample),]
# write to df
write.csv(df_avg, file.path(resdir, 'data_avg_family.csv'), row.names = FALSE)
# by geographical region
df_avg <- data.frame(matrix(ncol = 17, nrow = 0))
colnames(df_avg) <- c('Region', 'NoSample',
'Vowel_Number_mean', 'Vowel_Number_median', 'Vowel_Number_se',
'Dispersion_mean', 'Dispersion_median', 'Dispersion_se',
'Focalization_log_mean', 'Focalization_log_median', 'Focalization_log_se',
'Articulatory_Space_mean', 'Articulatory_Space_median', 'Articulatory_Space_se',
'Effective_DE_log_mean', 'Effective_DE_log_median', 'Effective_DE_log_se')
for(geo in unique(df$Geographic_Region)){
subdf <- df[df$Geographic_Region==geo, ]
df_avg <- rbind(df_avg, data.frame(Region = geo,
NoSample = nrow(subdf),
Vowel_Number_mean = mean(subdf$Vowel_Number, na.rm=TRUE), Vowel_Number_median = median(subdf$Vowel_Number, na.rm=TRUE), Vowel_Number_se = std.error(subdf$Vowel_Number, na.rm=TRUE),
Dispersion_mean = mean(subdf$Dispersion, na.rm=TRUE), Dispersion_median = median(subdf$Dispersion, na.rm=TRUE), Dispersion_se = std.error(subdf$Dispersion, na.rm=TRUE),
Focalization_log_mean = mean(log10(subdf$Focalization), na.rm=TRUE), Focalization_log_median = median(log10(subdf$Focalization), na.rm=TRUE), Focalization_log_se = std.error(log10(subdf$Focalization), na.rm=TRUE),
Articulatory_Space_mean = mean(subdf$Articulatory_Space, na.rm=TRUE), Articulatory_Space_median = median(subdf$Articulatory_Space, na.rm=TRUE), Articulatory_Space_se = std.error(subdf$Articulatory_Space, na.rm=TRUE),
Effective_DE_log_mean = mean(log10(subdf$Effective_DE), na.rm=TRUE), Effective_DE_log_median = median(log10(subdf$Effective_DE), na.rm=TRUE), Effective_DE_log_se = std.error(log10(subdf$Effective_DE), na.rm=TRUE)))
}
# write to df
write.csv(df_avg, file.path(resdir, 'data_avg_geo.csv'), row.names = FALSE)
# draw lme figure based on average values
df_avg <- read.csv(file.path(resdir, 'data_avg_family.csv'))
# only use 9 biggest families
df_avg <- df_avg[c(1:5,7:10),]
lm_mean <- lm(Focalization_log_mean ~ Effective_DE_log_mean, data = df_avg)
summary(lm_mean)
r.squaredGLMM(lm_mean)
# log ~ log linear with two error bars of se
fit_intercept <- coef(summary(lm_mean))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_mean))[,'Estimate'][2]
lab <- paste("Slope K = ", format(round(fit_slope, nsmall), nsmall),
"\nIntercept = ", format(round(fit_intercept, nsmall), nsmall),
"\np-value = ", round(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'], abs(floor(log10(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'])-nsmall))),
"\nAdj. R^2 = ", format(round(r.squaredGLMM(lm_mean)[,'R2c'], nsmall), nsmall), sep="")
ggplot(df_avg, aes(x=Effective_DE_log_mean, y=Focalization_log_mean)) +
geom_point(aes(color=Family), size=5, shape=18) +
geom_errorbar(aes(ymin = Focalization_log_mean - Focalization_log_se, ymax = Focalization_log_mean + Focalization_log_se), width=0.01, size=0.5) +
geom_errorbarh(aes(xmin = Effective_DE_log_mean - Effective_DE_log_se, xmax = Effective_DE_log_mean + Effective_DE_log_se), height=0.02, size=0.5) +
geom_smooth(method='lm') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
geom_text(aes(x=-0.55, y=-0.375, label=lab), hjust=0, size=geom.text.size) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, 'Family_avg_loglog')
savefig(fileName, 300, 10, 4, "in", "both")
# by geographical region
df_avg <- read.csv(file.path(resdir, 'data_avg_geo.csv'))
lm_mean <- lm(Focalization_log_mean ~ Effective_DE_log_mean, data = df_avg)
summary(lm_mean)
r.squaredGLMM(lm_mean)
# log ~ log linear
fit_intercept <- coef(summary(lm_mean))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_mean))[,'Estimate'][2]
lab <- paste("Slope K = ", format(round(fit_slope, nsmall), nsmall),
"\nIntercept = ", format(round(fit_intercept, nsmall), nsmall),
"\np-value = ", round(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'], abs(floor(log10(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'])-nsmall))),
"\nAdj. R^2 = ", format(round(r.squaredGLMM(lm_mean)[,'R2c'], nsmall), nsmall), sep="")
ggplot(df_avg, aes(x=Effective_DE_log_mean, y=Focalization_log_mean)) +
geom_point(aes(color=Region), size=4, shape=18) +
geom_errorbar(aes(ymin = Focalization_log_mean - Focalization_log_se, ymax = Focalization_log_mean + Focalization_log_se), width=0.01, size=0.5) +
geom_errorbarh(aes(xmin = Effective_DE_log_mean - Effective_DE_log_se, xmax = Effective_DE_log_mean + Effective_DE_log_se), height=0.02, size=0.5) +
geom_smooth(method='lm', se=TRUE) +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
geom_text(aes(x=-0.5, y=-0.55, label=lab), hjust=0, size=geom.text.size) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, 'Geo_avg_loglog')
savefig(fileName, 300, 10, 4, "in", "both")
############################################
# separate group: by Language Family (Genus)
############################################
resdir <- file.path(direct, 'Family'); dir.create(resdir, showWarnings = FALSE)
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
familyList <- unique(df$Family)
resDF <- data.frame(matrix(ncol = 6, nrow = 0))
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
familyList <- unique(df$Family)
resDF <- data.frame(matrix(ncol = 6, nrow = 0))
colnames(resDF) <- c('Family', 'NoSample', 'SlopeK', 'Intercept', 'p-value', 'adjR2')
for(family in familyList){
subdf <- df[df$Family==family, ]
# calculate column values
nosample <- nrow(subdf)
if(nosample==1){
fit_intercept <- NA
fit_slope <- NA
pvalue <- NA
adjr2 <- NA
}else{
# train lme model
result <- try(lme_family <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|Geographic_Region/ISO693_Code), data = subdf, control=lmerControl(optCtrl=list(maxfun=20000))), silent = TRUE)
if(class(result)[1]=='try-error'){
# all samples are from the same Geographic_Region, use lm model instead
result <- try(lm_family <- lm(log10(Focalization) ~ log10(Effective_DE), data = subdf), silent = TRUE)
if(class(result)[1]=='try-error'){
fit_intercept <- NA; fit_slope <- NA
pvalue <- NA
adjr2 <- NA
}else{
# calculate column values
fit_intercept <- coef(summary(lm_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_family))[,'Estimate'][2]
pvalue <- coef(summary(lm_family))['log10(Effective_DE)','Pr(>|t|)']
adjr2 <- r.squaredGLMM(lm_family)[,'R2c']
}
}else{
# calculate column values
fit_intercept <- coef(summary(lme_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_family))[,'Estimate'][2]
pvalue <- coef(summary(lme_family))['log10(Effective_DE)','Pr(>|t|)']
adjr2 <- r.squaredGLMM(lme_family)[,'R2c']
}
}
# add to resDF
resDF <- rbind(resDF, data.frame(Family=family, NoSample=nosample, SlopeK=fit_slope, Intercept=fit_intercept, p_value=pvalue, adjR2=adjr2))
}
# decreasing sorting by NoSample
resDF <- resDF[order(-resDF$NoSample),]
# save the results
write.csv(resDF, file.path(resdir, 'Family_lme_res.csv'), row.names = FALSE)
# get first 9 family data
resDF <- read.csv(file.path(resdir, 'Family_lme_res.csv'))
resDF <- resDF[c(1:5,7:10),]
familyList <- resDF$Family
for(family in familyList){
subdf <- df[df$Family==family,]
nosample <- nrow(subdf)
# train lme model
result <- try(lme_family <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|ISO693_Code) + (1|Geographic_Region), data = subdf, control=lmerControl(optCtrl=list(maxfun=20000))), silent = TRUE)
# log ~ log linear
if(class(result)[1]=='try-error'){
# use lm
lm_family <- lm(log10(Focalization) ~ log10(Effective_DE), data = subdf)
fit_intercept <- coef(summary(lm_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_family))[,'Estimate'][2]
ggplot(subdf, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(size=2, color='red') +
#geom_point(aes(color=Geographic_Region), size=2, color='red') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
ggtitle(paste('Family: ', family, "; No. Samples: ", nosample, '; Slope K: ', format(round(fit_slope, nsmall), nsmall), '; Adj R^2: ',  format(round(r.squaredGLMM(lm_family)[,'R2c'], nsmall), nsmall), sep="")) +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, paste('Family_lm_', family, '_loglog', sep=""))
savefig(fileName, 300, 10, 4, "in", "both")
}else{
fit_intercept <- coef(summary(lme_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_family))[,'Estimate'][2]
ggplot(subdf, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(size=2, color='red') +
#geom_point(aes(color=Geographic_Region), size=2, color='red') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
ggtitle(paste('Family: ', family, "; No. Samples: ", nosample, '; Slope K: ', format(round(fit_slope, nsmall), nsmall), '; Adj R^2: ',  format(round(r.squaredGLMM(lme_family)[,'R2c'], nsmall), nsmall), sep="")) +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, paste('Family_lme_', family, '_loglog', sep=""))
savefig(fileName, 300, 10, 4, "in", "both")
}
}
############################################
# separate group: by Language Family (Genus)
############################################
resdir <- file.path(direct, 'Family'); dir.create(resdir, showWarnings = FALSE)
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
familyList <- unique(df$Family)
resDF <- data.frame(matrix(ncol = 6, nrow = 0))
colnames(resDF) <- c('Family', 'NoSample', 'SlopeK', 'Intercept', 'p-value', 'adjR2')
for(family in familyList){
subdf <- df[df$Family==family, ]
# calculate column values
nosample <- nrow(subdf)
if(nosample==1){
fit_intercept <- NA
fit_slope <- NA
pvalue <- NA
adjr2 <- NA
}else{
# train lme model
result <- try(lme_family <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|Geographic_Region/ISO693_Code), data = subdf, control=lmerControl(optCtrl=list(maxfun=20000))), silent = TRUE)
if(class(result)[1]=='try-error'){
# all samples are from the same Geographic_Region, use lm model instead
result <- try(lm_family <- lm(log10(Focalization) ~ log10(Effective_DE), data = subdf), silent = TRUE)
if(class(result)[1]=='try-error'){
fit_intercept <- NA; fit_slope <- NA
pvalue <- NA
adjr2 <- NA
}else{
# calculate column values
fit_intercept <- coef(summary(lm_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_family))[,'Estimate'][2]
pvalue <- coef(summary(lm_family))['log10(Effective_DE)','Pr(>|t|)']
adjr2 <- r.squaredGLMM(lm_family)[,'R2c']
}
}else{
# calculate column values
fit_intercept <- coef(summary(lme_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_family))[,'Estimate'][2]
pvalue <- coef(summary(lme_family))['log10(Effective_DE)','Pr(>|t|)']
adjr2 <- r.squaredGLMM(lme_family)[,'R2c']
}
}
# add to resDF
resDF <- rbind(resDF, data.frame(Family=family, NoSample=nosample, SlopeK=fit_slope, Intercept=fit_intercept, p_value=pvalue, adjR2=adjr2))
}
# decreasing sorting by NoSample
resDF <- resDF[order(-resDF$NoSample),]
# save the results
write.csv(resDF, file.path(resdir, 'Family_lme_res.csv'), row.names = FALSE)
# get first 9 family data
resDF <- read.csv(file.path(resdir, 'Family_lme_res.csv'))
resDF <- resDF[c(1:5,7:10),]
familyList <- resDF$Family
for(family in familyList){
subdf <- df[df$Family==family,]
nosample <- nrow(subdf)
# train lme model
result <- try(lme_family <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|Geographic_Region/ISO693_Code), data = subdf, control=lmerControl(optCtrl=list(maxfun=20000))), silent = TRUE)
# log ~ log linear
if(class(result)[1]=='try-error'){
# use lm
lm_family <- lm(log10(Focalization) ~ log10(Effective_DE), data = subdf)
fit_intercept <- coef(summary(lm_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_family))[,'Estimate'][2]
ggplot(subdf, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(size=2, color='red') +
#geom_point(aes(color=Geographic_Region), size=2, color='red') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
ggtitle(paste('Family: ', family, "; No. Samples: ", nosample, '; Slope K: ', format(round(fit_slope, nsmall), nsmall), '; Adj R^2: ',  format(round(r.squaredGLMM(lm_family)[,'R2c'], nsmall), nsmall), sep="")) +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, paste('Family_lm_', family, '_loglog', sep=""))
savefig(fileName, 300, 10, 4, "in", "both")
}else{
fit_intercept <- coef(summary(lme_family))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_family))[,'Estimate'][2]
ggplot(subdf, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(size=2, color='red') +
#geom_point(aes(color=Geographic_Region), size=2, color='red') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
ggtitle(paste('Family: ', family, "; No. Samples: ", nosample, '; Slope K: ', format(round(fit_slope, nsmall), nsmall), '; Adj R^2: ',  format(round(r.squaredGLMM(lme_family)[,'R2c'], nsmall), nsmall), sep="")) +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, paste('Family_lme_', family, '_loglog', sep=""))
savefig(fileName, 300, 10, 4, "in", "both")
}
}
resdir <- file.path(direct, 'Region'); dir.create(resdir, showWarnings = FALSE)
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
geoList <- unique(df$Geographic_Region)
resDF <- data.frame(matrix(ncol = 6, nrow = 0))
colnames(resDF) <- c('Geographic_Region', 'NoSample', 'SlopeK', 'Intercept', 'p-value', 'adjR2')
for(geo in geoList){
subdf <- df[df$Geographic_Region==geo, ]
# calculate column values
nosample <- nrow(subdf)
if(nosample==1){
fit_intercept <- NA
fit_slope <- NA
pvalue <- NA
adjr2 <- NA
}else{
# train lme model
result <- try(lme_geo <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|ISO693_Code) + (1|Family), data = subdf, control=lmerControl(optCtrl=list(maxfun=20000))), silent = TRUE)
if(class(result)[1]=='try-error'){
# all samples are from the same Geographic_Region, use lm model instead
result <- try(lm_geo <- lm(log10(Focalization) ~ log10(Effective_DE), data = subdf), silent = TRUE)
if(class(result)[1]=='try-error'){
fit_intercept <- NA; fit_slope <- NA
pvalue <- NA
adjr2 <- NA
}else{
# calculate column values
fit_intercept <- coef(summary(lm_geo))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_geo))[,'Estimate'][2]
pvalue <- coef(summary(lm_geo))['log10(Effective_DE)','Pr(>|t|)']
adjr2 <- r.squaredGLMM(lm_geo)[,'R2c']
}
}else{
# calculate column values
fit_intercept <- coef(summary(lme_geo))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_geo))[,'Estimate'][2]
pvalue <- coef(summary(lme_geo))['log10(Effective_DE)','Pr(>|t|)']
adjr2 <- r.squaredGLMM(lme_geo)[,'R2c']
}
}
# add to resDF
resDF <- rbind(resDF, data.frame(Geographic_Region=geo, NoSample=nosample, SlopeK=fit_slope, Intercept=fit_intercept, p_value=pvalue, adjR2=adjr2))
}
# save the results
write.csv(resDF, file.path(resdir, 'Geo_lme_res.csv'), row.names = FALSE)
# draw figure
resDF <- read.csv(file.path(resdir, 'Geo_lme_res.csv'))
geoList <- resDF$Geographic_Region
for(geo in geoList){
subdf <- df[df$Geographic_Region==geo,]
nosample <- nrow(subdf)
# train lme model
result <- try(lme_geo <- lmer(log10(Focalization) ~ log10(Effective_DE)
+ (1|ISO693_Code) + (1|Family), data = subdf, control=lmerControl(optCtrl=list(maxfun=20000))), silent = TRUE)
# log ~ log linear
if(class(result)[1]=='try-error'){
# use lm
lm_geo <- lm(log10(Focalization) ~ log10(Effective_DE), data = subdf)
fit_intercept <- coef(summary(lm_geo))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_geo))[,'Estimate'][2]
ggplot(subdf, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(size=2, color='red') +
#geom_point(aes(color=Family), size=1, color='red') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
#geom_text(aes(x=-0.4, y=-0.4, label=lab), hjust=0, size=geom.text.size) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
ggtitle(paste('Region: ', geo, '; No. Samples: ', nosample, '; Slope K: ', format(round(fit_slope, nsmall), nsmall), '; Adj R^2: ',  format(round(r.squaredGLMM(lm_geo)[,'R2c'], nsmall), nsmall), sep="")) +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, paste('Geo_', geo, '_loglog', sep=""))
savefig(fileName, 300, 10, 4, "in", "both")
}else{
fit_intercept <- coef(summary(lme_geo))[, 'Estimate'][1]; fit_slope <- coef(summary(lme_geo))[,'Estimate'][2]
ggplot(subdf, aes(x=log10(Effective_DE), y=log10(Focalization))) +
geom_point(size=2, color='red') +
#geom_point(aes(color=Family), size=1, color='red') +
geom_abline(aes(slope=fit_slope, intercept=fit_intercept), size=1) +
#geom_text(aes(x=-0.4, y=-0.4, label=lab), hjust=0, size=geom.text.size) +
xlab('log10(Effective DE)') + ylab('log10(FE)') +
ggtitle(paste('Region: ', geo, '; No. Samples: ', nosample, '; Slope K: ', format(round(fit_slope, nsmall), nsmall), '; Adj R^2: ',  format(round(r.squaredGLMM(lme_geo)[,'R2c'], nsmall), nsmall), sep="")) +
theme_bw() +
theme(plot.title=element_text(size=theme.size), axis.text=element_text(size=theme.size), text=element_text(size=theme.size),
panel.grid.major = element_line(colour = "grey", linetype = "dotted", size = 1))
fileName <- file.path(resdir, paste('Geo_', geo, '_loglog', sep=""))
savefig(fileName, 300, 10, 4, "in", "both")
}
}
