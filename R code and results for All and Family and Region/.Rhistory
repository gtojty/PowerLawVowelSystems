mean(c(-0.71915363,
-0.781641553,
-0.766090857,
-0.870978969,
-0.638498136,
-0.846848514,
-0.591919197,
-0.976396983
))
sd(c(-0.71915363,
-0.781641553,
-0.766090857,
-0.870978969,
-0.638498136,
-0.846848514,
-0.591919197,
-0.976396983
))
mean(c(-0.843436714,
-0.830761974,
-0.641715224,
-0.946074432,
-0.674816506,
-0.391181439,
-0.753629286,
-0.637283332,
-1.796488082
))
sd(c(-0.843436714,
-0.830761974,
-0.641715224,
-0.946074432,
-0.674816506,
-0.391181439,
-0.753629286,
-0.637283332,
-1.796488082
))
setwd("C:/GongTao/Academic Activities/Publications/Linguistics/Journals/English/Frontiers in Psychology-SCI/VowelEvo/SupportInfo_git/R code and results for All and Family and Region")
# required packages
require(stats)
require(lme4)
require(lmerTest)
require(EMAtools)
require(party)
require(lattice)
require(MuMIn)
require(boot)
require(ggplot2)
require(plotrix)
require(Rmisc)
# for drawing figures
geom.text.size = 5; theme.size = 3*geom.text.size
sizex <- 10; sizey <- 8; hjust <- 0.5; angle <- 45
# number of digits
nsmall <- 4
savefig <- function(fileName, dpi, width, height, units, type){
#' Function to save figures
#' @param fileName file name of the figure
#' @param dpi resolution, e.g., 300
#' @param width figure width in inches (units)
#' @param height figure height in inches (units)
#' @param units unit name for width and height, e.g., 'in'
#' @param type figure type: 'png', png figure; 'pdf', pdf figure; 'both', both png and pdf figures
if(type=="png"){ file <- paste(fileName, ".png", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units) }
if(type=="pdf"){ file <- paste(fileName, ".pdf", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units) }
if(type=="both"){
file <- paste(fileName, ".png", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units)
file <- paste(fileName, ".pdf", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units)
}
}
# @author Tao Gong (gtojty@gmail.com)
# 2021/11/6
# required packages
require(stats)
require(lme4)
require(lmerTest)
require(EMAtools)
require(party)
require(lattice)
require(MuMIn)
require(boot)
require(ggplot2)
require(plotrix)
# for drawing figures
geom.text.size = 5; theme.size = 3*geom.text.size
sizex <- 10; sizey <- 8; hjust <- 0.5; angle <- 45
# number of digits
nsmall <- 4
savefig <- function(fileName, dpi, width, height, units, type){
#' Function to save figures
#' @param fileName file name of the figure
#' @param dpi resolution, e.g., 300
#' @param width figure width in inches (units)
#' @param height figure height in inches (units)
#' @param units unit name for width and height, e.g., 'in'
#' @param type figure type: 'png', png figure; 'pdf', pdf figure; 'both', both png and pdf figures
if(type=="png"){ file <- paste(fileName, ".png", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units) }
if(type=="pdf"){ file <- paste(fileName, ".pdf", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units) }
if(type=="both"){
file <- paste(fileName, ".png", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units)
file <- paste(fileName, ".pdf", sep=""); ggsave(file, dpi = dpi, width = width, height = height, units = units)
}
}
direct <- '.'
##############################
# average level lm and figure
##############################
resdir <- file.path(direct, 'Average'); dir.create(resdir, showWarnings = FALSE)
# read in data
df <- read.csv(file.path(direct, 'Dataset_S1_Processed.csv'))
# draw lme figure based on average values
df_avg <- read.csv(file.path(resdir, 'data_avg_family.csv'))
# only use 9 biggest families
df_avg <- df_avg[c(1:5,7:10),]
lm_mean <- lm(Focalization_log_mean ~ Effective_DE_log_mean, data = df_avg)
summary(lm_mean)
r.squaredGLMM(lm_mean)
# log ~ log linear with two error bars of se
fit_intercept <- coef(summary(lm_mean))[, 'Estimate'][1]; fit_slope <- coef(summary(lm_mean))[,'Estimate'][2]
lab <- paste("Slope K = ", format(round(fit_slope, nsmall), nsmall),
"\nIntercept = ", format(round(fit_intercept, nsmall), nsmall),
"\np-value = ", round(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'], abs(floor(log10(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'])-nsmall))),
"\nAdj. R^2 = ", format(round(r.squaredGLMM(lm_mean)[,'R2c'], nsmall), nsmall), sep="")
lab
abs(floor(log10(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'])-nsmall))
lab <- paste("Slope K = ", format(round(fit_slope, nsmall), nsmall),
+              "\nIntercept = ", format(round(fit_intercept, nsmall), nsmall),
+              "\np-value = ", round(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'], nsmall),
+              "\nAdj. R^2 = ", format(round(r.squaredGLMM(lm_mean)[,'R2c'], nsmall), nsmall), sep="")
lab <- paste("Slope K = ", format(round(fit_slope, nsmall), nsmall),
+              "\nIntercept = ", format(round(fit_intercept, nsmall), nsmall),
+              "\np-value = ", format(round(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'], nsmall), nsmall),
+              "\nAdj. R^2 = ", format(round(r.squaredGLMM(lm_mean)[,'R2c'], nsmall), nsmall), sep="")
format(round(coef(summary(lm_mean))['Effective_DE_log_mean','Pr(>|t|)'], nsmall), nsmall)
